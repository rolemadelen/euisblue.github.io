I"r7<h1 id="目次">目次</h1>
<ul>
  <li><a href="#concept">バブルソート</a></li>
  <li><a href="#example">整列過程</a></li>
  <li><a href="#timecomp">時間複雑度</a></li>
  <li><a href="#imp">実装</a>
    <ul>
      <li>最適化方法
        <ul>
          <li><a href="#c">C</a></li>
          <li><a href="#ruby">Ruby</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#related">関連記事</a></li>
  <li><a href="#ref">参照</a></li>
</ul>
<hr />

<p><br /></p>

<h2 id="バブルソート">バブルソート<a id="concept"></a></h2>
<p>バブルソート（英: bubble sort）は隣接した２つの数字を反復的に比較しながら整列させるアルゴリズムである。
実装が簡単なので、多くの人々が初めに向き合うようになる整列アルゴリズムでもある。</p>

<p>だが、データの大きさが大きくなるほど、アルゴリズムの演算回数が指数関数的に増加する。
バブルソートはとても非効率的なアルゴリズムで実務にはほとんど使われない。</p>

<p>バブルソートは一番大きい数字が初めて自分の位置を探すことが、まるで重い物体が先に沈むような姿のためシンキングソート（Sinking Sort）とも呼ばれる。</p>

<p><br /></p>
<h2 id="整列過程">整列過程<a id="example"></a></h2>
<p><img src="/assets/images/algorithm/sorting/bubble_sort.png" alt="bubble sort" /></p>

<p>１回戦の過程を見てみよう。</p>

<p><code class="highlighter-rouge">56</code>と<code class="highlighter-rouge">24</code>を比較する。<code class="highlighter-rouge">56</code>は<code class="highlighter-rouge">24</code>より大きいから交換する。 <br />
<code class="highlighter-rouge">56</code>と<code class="highlighter-rouge">10</code>を比較する。<code class="highlighter-rouge">56</code>は<code class="highlighter-rouge">10</code>より大きいから交換する。 <br />
<code class="highlighter-rouge">56</code>と <code class="highlighter-rouge">35</code>を比較する。<code class="highlighter-rouge">56</code>は<code class="highlighter-rouge">35</code>より大きいから交換する。 <br />
<code class="highlighter-rouge">56</code>と <code class="highlighter-rouge">72</code>を比較する。<code class="highlighter-rouge">56</code>は<code class="highlighter-rouge">72</code>より小さい。<br />
<strong>一回戦</strong>か終わった。この配列の中で<strong>一番大きいな数字</strong>は<code class="highlighter-rouge">72</code>だ。</p>

<p><br />
２回戦の過程を見てみよう。</p>

<p><code class="highlighter-rouge">24</code>と<code class="highlighter-rouge">10</code>を比較する。<code class="highlighter-rouge">24</code>は<code class="highlighter-rouge">10</code>より大きいから交換する。 <br />
<code class="highlighter-rouge">24</code>と<code class="highlighter-rouge">35</code>を比較する。<code class="highlighter-rouge">24</code>は<code class="highlighter-rouge">35</code>より小さい。<br />
<code class="highlighter-rouge">35</code>と<code class="highlighter-rouge">56</code>を比較する。<code class="highlighter-rouge">35</code>は<code class="highlighter-rouge">56</code>より小さい。<br />
<strong>2回戦</strong>が終わった。<strong>二番目に大きな数字</strong>は<code class="highlighter-rouge">56</code>だ。</p>

<p><br />
３回戦の過程を見てみよう。</p>

<p><code class="highlighter-rouge">10</code>と <code class="highlighter-rouge">24</code>を比較する。<code class="highlighter-rouge">10</code>は<code class="highlighter-rouge">24</code>より小さい。 <br />
<code class="highlighter-rouge">24</code>と <code class="highlighter-rouge">35</code>を比較する。<code class="highlighter-rouge">24</code>は<code class="highlighter-rouge">35</code>より小さい。 <br />
<strong>3回戦</strong>が終わった。<strong>三番目に大きな数字</strong>は<code class="highlighter-rouge">35</code>だ。</p>

<p><br />
４回戦の過程を見てみよう。</p>

<p><code class="highlighter-rouge">10</code>と<code class="highlighter-rouge">24</code>を比較する。<code class="highlighter-rouge">10</code>は<code class="highlighter-rouge">24</code>より小さい。 <br />
<strong>4回戦</strong>が終わって。<strong>四番目に大きな数字</strong>は<code class="highlighter-rouge">24</code>だ。</p>

<p>最後まで残った数字<code class="highlighter-rouge">10</code>は、一番小さい数字なので配列の最初の位置を占める。</p>

<p><br /></p>
<h2 id="時間複雑度-">時間複雑度 <a id="timecomp"></a></h2>
<ul>
  <li>比較回数
    <ul>
      <li>回戦ごとに比較対象が一つずつ減らす:<br />
(n-1) + (n-2) + … + 2 + 1 = n(n-1)/2 = <strong>O(n^2)</strong></li>
    </ul>
  </li>
  <li>交換回数
    <ul>
      <li>最悪の場合比較するごとに交換するから比較回数と同様に<strong>O(n^2)</strong>になる。</li>
    </ul>
  </li>
</ul>

<p><br /></p>
<h2 id="バブルソート実装-c言語">バブルソート実装 (C言語)<a id="imp"></a></h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define SIZE 5
</span>
<span class="kt">void</span> <span class="nf">bubbleSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[])</span>
<span class="p">{</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">SIZE</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">SIZE</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
			<span class="p">{</span>
				<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
				<span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
				<span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="最適化方法">最適化方法</h3>
<p><strong>一つ</strong> <br />
1回戦後一つのデータが整列されてあるし, 2回戦後は２つのデータが整列されてある。 <br />
これは<code class="highlighter-rouge">k</code>回戦の中で<code class="highlighter-rouge">n-k</code>個のデータだけ比較すればいいという意味だ。</p>

<p><strong>二つ</strong> <br />
与えられた配列がもう整列している場合交換回数は０だ。つまり<code class="highlighter-rouge">k</code>回線が終わった時交換を全然さなかったら、配列がもう整列している状態なのですぐループから抜け出せばいい。</p>

<p><br /></p>
<h3 id="バブルソート最適化c言語">バブルソート最適化（C言語）<a id="c"></a></h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define SIZE 5
</span>
<span class="kt">void</span> <span class="nf">bubbleSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[])</span>
<span class="p">{</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">SIZE</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="kt">_Bool</span> <span class="n">isSwapped</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">SIZE</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
			<span class="p">{</span>
				<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
				<span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
				<span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>

				<span class="n">isSwapped</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>

		<span class="k">if</span><span class="p">(</span><span class="n">isSwapped</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>
<h3 id="バブルソート最適化ruby-">バブルソート最適化（Ruby） <a id="ruby"></a></h3>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">bubble_sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="nf">size</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="p">(</span><span class="mi">0</span> <span class="o">...</span> <span class="n">n</span><span class="p">)</span>
        <span class="n">bSwapped</span> <span class="o">=</span> <span class="kp">false</span>
        
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="p">(</span><span class="mi">0</span> <span class="o">...</span> <span class="n">n</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
                <span class="n">bSwapped</span> <span class="o">=</span> <span class="kp">true</span>
                <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
            <span class="k">end</span>
        <span class="k">end</span>

        <span class="k">if</span> <span class="n">bSwapped</span> <span class="o">==</span> <span class="kp">false</span>
            <span class="k">return</span> <span class="n">arr</span>
        <span class="k">end</span>
    <span class="k">end</span>

    <span class="n">arr</span>
<span class="k">end</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="関連記事-">関連記事 <a id="related"></a></h2>

<ul>
  <li><a href="/algorithm/2019/08/01/ja-sorting-selection_sort.html">Algorithm・選択ソート</a></li>
</ul>

<p><br /></p>
<h2 id="参照-">参照 <a id="ref"></a></h2>
<ul>
  <li><a href="https://gmlwjd9405.github.io/2018/05/06/algorithm-bubble-sort.html">[알고리즘] 버블 정렬(bubble sort)이란</a></li>
  <li><a href="https://www.codereading.com/algo_and_ds/algo/bubble_sort.html">バブルソート</a></li>
</ul>
:ET