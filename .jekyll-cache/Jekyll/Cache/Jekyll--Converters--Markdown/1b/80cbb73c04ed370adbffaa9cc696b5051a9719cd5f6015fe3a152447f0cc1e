I"Å7<h2 id="contents">Contents</h2>
<ul>
  <li><a href="#concept">Concept</a></li>
  <li><a href="#op">Operations</a></li>
  <li><a href="#implement">Implementation</a></li>
  <li><a href="#app">Applications</a></li>
  <li><a href="#ref">Reference</a></li>
</ul>
<hr />

<p><br /></p>

<h2 id="concept-">Concept <a id="concept"></a></h2>
<p>Doubly linked list can reference both next and previous nodes.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span> <span class="n">node_t</span>
<span class="p">{</span>
	<span class="k">struct</span> <span class="n">node_t</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
	<span class="k">struct</span> <span class="n">node_t</span> <span class="o">*</span><span class="n">prev</span><span class="p">;</span>
	<span class="n">elem</span> <span class="n">data</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Node</span><span class="p">;</span>
</code></pre></div></div>

<p>The structure of doubly linked list is a bit safer than singly linked list in terms
of data loss. If head node is lost in singly linked list, all data are potentially lost and
there is no way to retrieve them. In doubly linked list however, it is possible to retrieve
them by traversing backward from the tail node (if linked correctly). But additional node
slightly increases the workload and size of the structure.</p>

<p>Unlike singly linked list where it takes linear time to delete current node, 
doubly linked list may perform the same task in constant time using previous and next nodes.</p>

<p><br /></p>
<h2 id="operations-">Operations <a id="op"></a></h2>
<ul>
  <li><strong>pushFront(..)</strong> : insert node at the beginning</li>
  <li><strong>pushBack(..)</strong> : insert node at the end</li>
  <li><strong>popFront(..)</strong> : remove first node</li>
  <li><strong>popBack(..)</strong> : remove last node</li>
  <li><strong>insertAt(..)</strong> : insert node to the list</li>
  <li><strong>removeAt(..)</strong> : remove node in the list</li>
</ul>

<p><br /></p>
<h2 id="implementation-">Implementation <a id="implement"></a></h2>
<p>Implemented using two sentinel nodes to distinguish the beginning and end of the list.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span> <span class="n">slinkedlist_t</span>
<span class="p">{</span>
	<span class="c1">// Sentinel nodes</span>
	<span class="n">Node</span> <span class="o">*</span><span class="n">dummy_head</span><span class="p">;</span>
	<span class="n">Node</span> <span class="o">*</span><span class="n">dummy_tail</span><span class="p">;</span>
	<span class="kt">size_t</span> <span class="n">size</span><span class="p">;</span>
<span class="p">}</span> <span class="n">SLinkedList</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">pushFront</span><span class="p">(</span><span class="n">DLinkedList</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="n">elem</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">Node</span> <span class="o">*</span><span class="n">newNode</span> <span class="o">=</span> <span class="n">createNode</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
	<span class="n">connectLink</span><span class="p">(</span><span class="n">newNode</span><span class="p">,</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
	<span class="n">connectLink</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span><span class="p">,</span> <span class="n">newNode</span><span class="p">);</span>
	
	<span class="o">++</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">pushBack</span><span class="p">(</span><span class="n">DLinkedList</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="n">elem</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">Node</span> <span class="o">*</span><span class="n">lastNode</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_tail</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
	<span class="n">Node</span> <span class="o">*</span><span class="n">newNode</span> <span class="o">=</span> <span class="n">createNode</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
	<span class="n">connectLink</span><span class="p">(</span><span class="n">lastNode</span><span class="p">,</span> <span class="n">newNode</span><span class="p">);</span>
	<span class="n">connectLink</span><span class="p">(</span><span class="n">newNode</span><span class="p">,</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_tail</span><span class="p">);</span>

	<span class="o">++</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">popFront</span><span class="p">(</span><span class="n">DLinkedList</span> <span class="o">*</span><span class="n">list</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
		<span class="n">free</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span><span class="p">);</span>
		<span class="n">temp</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
		<span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>

		<span class="o">--</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">popBack</span><span class="p">(</span><span class="n">DLinkedList</span> <span class="o">*</span><span class="n">list</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_tail</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
		<span class="n">free</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_tail</span><span class="p">);</span>
		<span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
		<span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_tail</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>

		<span class="o">--</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">insertAt</span><span class="p">(</span><span class="n">DLinkedList</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="n">elem</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">pos</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">pushFront</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">pos</span> <span class="o">&gt;</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">pushBack</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">pos</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">pos</span> <span class="o">&lt;=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">Node</span> <span class="o">*</span><span class="n">newNode</span> <span class="o">=</span> <span class="n">createNode</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
		<span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span><span class="p">;</span>

		<span class="k">while</span><span class="p">(</span><span class="o">--</span><span class="n">pos</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">connectLink</span><span class="p">(</span><span class="n">newNode</span><span class="p">,</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
		<span class="n">connectLink</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span> <span class="n">newNode</span><span class="p">);</span>
		<span class="o">++</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">removeAt</span><span class="p">(</span><span class="n">DLinkedList</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">pos</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">popFront</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">pos</span> <span class="o">&gt;</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">popBack</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span>
	<span class="p">{</span>
		<span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span><span class="p">;</span>
		<span class="k">while</span><span class="p">(</span><span class="n">pos</span><span class="o">--</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">connectLink</span><span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">,</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
		<span class="n">free</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>

		<span class="o">--</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>
<h2 id="applications-">Applications <a id="app"></a></h2>
<ul>
  <li><a href="http://web.cecs.pdx.edu/~harry/Blitz/BlitzDoc/ThreadScheduler.htm">Thread Scheduler</a></li>
  <li>Music Player
    <ul>
      <li>next/prev features</li>
    </ul>
  </li>
  <li>Undo/Re-do features</li>
</ul>

<p><br /></p>
<h2 id="reference-">Reference <a id="ref"></a></h2>
<ul>
  <li><a href="https://en.wikipedia.org/wiki/Doubly_linked_list">Wikipedia : Doubly Linked List</a></li>
  <li><a href="https://namu.wiki/w/%EC%97%B0%EA%B2%B0%20%EB%A6%AC%EC%8A%A4%ED%8A%B8">Namu Wiki : Doubly Linked List</a></li>
</ul>
:ET