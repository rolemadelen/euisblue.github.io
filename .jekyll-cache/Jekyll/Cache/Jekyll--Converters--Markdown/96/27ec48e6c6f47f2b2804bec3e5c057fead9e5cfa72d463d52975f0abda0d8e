I"x<h2 id="二分探索アルゴリズムとは"><strong>二分探索アルゴリズムとは?</strong></h2>

<p>二分探索く(Binary Search)アルゴリズムは<strong>並べ替えリスト</strong>から特定の値の位置を探すアルゴリズムだ。</p>

<p>最初に中間値を求めたあと、その値と探す値を比較して不要な部分とは比較しなくても大丈夫だ。
不要な部分とは中間値の左または右にあるデータたちで、このデータはリストの半分と同じだ。
つまり、一回比較するだけでリストの半分のデータを除外できる。</p>

<p><img src="/assets/images/algorithm/search/search-binary-search-1.jpg" alt="Binary Search" />
もし探すダータが<code class="highlighter-rouge">5</code>より大きい場合、<code class="highlighter-rouge">5</code>左にあるすべてのデータはもう関係ないし逆の場合も同じだ。つまり、
毎回リストを半分にするのができてLinear Searchよりもっと早く値を探すのができる。</p>

<p><br /></p>

<h2 id="ruby実装コード"><strong>Ruby実装コード</strong></h2>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">binarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">)</span>
    <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="p">(</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>

    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">low</span> <span class="o">&gt;</span> <span class="n">high</span>

    <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">val</span>
        <span class="k">return</span> <span class="n">mid</span>
    <span class="k">elsif</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">val</span>
        <span class="n">binarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">low</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">)</span>
    <span class="k">else</span>
        <span class="n">binarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p><a href="https://github.com/muicode/coding/blob/master/algorithm/search/binsearch.cpp">C++コードが見たい！</a></p>

<p><br /></p>

<h2 id="説明"><strong>説明</strong></h2>

<p><em>リストは昇順に並べ替えてる。もし降順の場合は条件式を逆にすると大丈夫。</em></p>

<p>中間値を探す：<code class="highlighter-rouge">mid = low + (high - low) / 2;</code></p>

<p>普通中間値は<code class="highlighter-rouge">mid = (low + high) / 2</code>を使って求めるけどこれはoverflow-errorが起こる危険がある。
もちろんRubyようにBigNumberを自動に処理する言語はどちを使っても大丈夫だけど、
なぜその式を使うのかぐらいは知っているのが重要と思う。</p>

<p>中間値求めて探す値「<code class="highlighter-rouge">target</code>」と比較する。このとき発生できる場合の数は４つがある。</p>
<ol>
  <li>中間値＝＝<code class="highlighter-rouge">target</code>の場合
    <ul>
      <li><code class="highlighter-rouge">target</code>のindexを戻す。
 <img src="/assets/images/algorithm/search/search-binary-search-2.jpg" alt="Binary Search" /></li>
    </ul>
  </li>
  <li>中間値が<code class="highlighter-rouge">target</code>より大きい場合
    <ul>
      <li><code class="highlighter-rouge">target</code>が中間値の<strong>左側</strong>にあるので<code class="highlighter-rouge">high</code>の値を<code class="highlighter-rouge">middle - 1</code>に返してまた比較する。<br />
 <img src="/assets/images/algorithm/search/search-binary-search-3.jpg" alt="Binary Search" /></li>
    </ul>
  </li>
  <li>中間値が<code class="highlighter-rouge">target</code>より小さい場合
    <ul>
      <li><code class="highlighter-rouge">target</code>が中間値の<strong>右側</strong>にあるので<code class="highlighter-rouge">low</code>の値を<code class="highlighter-rouge">middle + 1</code>に返してまた比較する。<br />
 <img src="/assets/images/algorithm/search/search-binary-search-4.jpg" alt="Binary Search" /></li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">target</code>がリストの中に存在しない場合
    <ul>
      <li><code class="highlighter-rouge">target</code>が存在しないとき<code class="highlighter-rouge">low</code>が<code class="highlighter-rouge">high</code>より大きいになる。そのときは<code class="highlighter-rouge">-1</code>を戻す。</li>
    </ul>
  </li>
</ol>
:ET