I"D?<h2 id="contents">Contents</h2>
<ul>
  <li><a href="#sll">Concept</a></li>
  <li><a href="#op">Operations</a></li>
  <li><a href="#implementation">Implementations</a></li>
  <li><a href="#app">Applications</a></li>
  <li><a href="#problem">Problems to Try</a></li>
  <li><a href="#ref">Reference</a></li>
</ul>
<hr />

<p><br /></p>

<h2 id="concept-">Concept <a id="sll"></a></h2>
<p>Singly Linked List is the most basic form of a linked list in which current node can 
only reference the next node.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span> <span class="n">node_t</span>
<span class="p">{</span>
	<span class="k">struct</span> <span class="n">node_t</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
	<span class="n">elem</span> <span class="n">data</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Node</span><span class="p">;</span>
</code></pre></div></div>

<p>It is a simple data structure but does have risky parts to take care of. <br />
If address of the particular node is lost or overridden, you no longer have an access
to any data linked by that node.</p>

<p>The <strong>constant</strong> time of insertion and deletion is the advantage of the list. <br />
But it takes <strong>linear</strong>time for an access because you must traverse from the first node 
to the target node.</p>

<p><br /></p>
<h2 id="operations-">Operations <a id="op"></a></h2>
<ul>
  <li><strong>pushFront(..)</strong> : insert node at the beginning</li>
  <li><strong>pushBack(..)</strong> : insert node at the end</li>
  <li><strong>popFront(..)</strong> : remove first node</li>
  <li><strong>popBack(..)</strong> : remove last node</li>
  <li><strong>insertAt(..)</strong> : insert node to the list</li>
  <li><strong>removeAt(..)</strong> : remove node in the list</li>
</ul>

<p><br /></p>
<h2 id="implementation-">Implementation <a id="implementation"></a></h2>
<p>This linked list use two sentinel nodes to distinguish the beginning and end of the list.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span> <span class="n">slinkedlist_t</span>
<span class="p">{</span>
	<span class="c1">// Sentinel nodes</span>
	<span class="n">Node</span> <span class="o">*</span><span class="n">dummy_head</span><span class="p">;</span>
	<span class="n">Node</span> <span class="o">*</span><span class="n">dummy_tail</span><span class="p">;</span>
	<span class="kt">size_t</span> <span class="n">size</span><span class="p">;</span>
<span class="p">}</span> <span class="n">SLinkedList</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">pushFront</span><span class="p">(</span><span class="n">SLinkedList</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="n">elem</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">Node</span> <span class="o">*</span><span class="n">newNode</span> <span class="o">=</span> <span class="n">createNode</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
	<span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>

	<span class="n">connectLink</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span><span class="p">,</span> <span class="n">newNode</span><span class="p">);</span>
	<span class="n">connectLink</span><span class="p">(</span><span class="n">newNode</span><span class="p">,</span> <span class="n">temp</span><span class="p">);</span>
	
	<span class="o">++</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">pushBack</span><span class="p">(</span><span class="n">SLinkedList</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="n">elem</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
	<span class="c1">// locate the last node</span>
	<span class="n">Node</span> <span class="o">*</span><span class="n">lastNode</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="n">lastNode</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_tail</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">lastNode</span> <span class="o">=</span> <span class="n">lastNode</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="c1">// add new node</span>
	<span class="n">Node</span> <span class="o">*</span><span class="n">newNode</span> <span class="o">=</span> <span class="n">createNode</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
	<span class="n">connectLink</span><span class="p">(</span><span class="n">lastNode</span><span class="p">,</span> <span class="n">newNode</span><span class="p">);</span>
	<span class="n">connectLink</span><span class="p">(</span><span class="n">newNode</span><span class="p">,</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_tail</span><span class="p">);</span>

	<span class="o">++</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">popFront</span><span class="p">(</span><span class="n">SLinkedList</span> <span class="o">*</span><span class="n">list</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
		<span class="n">free</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
		<span class="n">connectLink</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span><span class="p">,</span> <span class="n">temp</span><span class="p">);</span>
		<span class="o">--</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">popBack</span><span class="p">(</span><span class="n">SLinkedList</span> <span class="o">*</span><span class="n">list</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="c1">// locate the last node</span>
		<span class="n">Node</span> <span class="o">*</span><span class="n">lastNode</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span><span class="p">;</span>
		<span class="k">while</span><span class="p">(</span><span class="n">lastNode</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_tail</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">lastNode</span> <span class="o">=</span> <span class="n">lastNode</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="c1">// remove the last node and reconnect links</span>
		<span class="n">free</span><span class="p">(</span><span class="n">lastNode</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
		<span class="n">connectLink</span><span class="p">(</span><span class="n">lastNode</span><span class="p">,</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_tail</span><span class="p">);</span>
		<span class="o">--</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">insertAt</span><span class="p">(</span><span class="n">SLinkedList</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">,</span> <span class="n">elem</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">pos</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">pushFront</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">pos</span> <span class="o">&gt;</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">pushBack</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">pos</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">pos</span> <span class="o">&lt;=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">pos</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">Node</span> <span class="o">*</span><span class="n">newNode</span> <span class="o">=</span> <span class="n">createNode</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
		<span class="n">connectLink</span><span class="p">(</span><span class="n">newNode</span><span class="p">,</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
		<span class="n">connectLink</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span> <span class="n">newNode</span><span class="p">);</span>

		<span class="o">++</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">removeAt</span><span class="p">(</span><span class="n">SLinkedList</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pos</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">pos</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">popFront</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">pos</span> <span class="o">&gt;</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">popBack</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span>
	<span class="p">{</span>
		<span class="n">Node</span> <span class="o">*</span><span class="n">prev</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">dummy_head</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">pos</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="n">prev</span> <span class="o">=</span> <span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
		<span class="p">}</span>

		<span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
		<span class="n">free</span><span class="p">(</span><span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
		<span class="n">connectLink</span><span class="p">(</span><span class="n">prev</span><span class="p">,</span> <span class="n">temp</span><span class="p">);</span>

		<span class="o">--</span><span class="n">list</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>
<h2 id="applications-">Applications <a id="app"></a></h2>
<ul>
  <li>Stack</li>
  <li>Queue</li>
  <li>Hash Chaining</li>
  <li>FAT File System - Chunking</li>
</ul>

<p><br /></p>
<h2 id="problems-to-try-">Problems to Try <a id="problem"></a></h2>
<ul>
  <li><a href="https://leetcode.com/problems/middle-of-the-linked-list/">Middle of the Linked List</a></li>
  <li><a href="https://leetcode.com/problems/delete-node-in-a-linked-list/">Delete Node in a Linked List</a></li>
</ul>

<p><br /></p>
<h2 id="reference-">Reference <a id="ref"></a></h2>
<ul>
  <li><a href="https://en.wikipedia.org/wiki/Linked_list">Wikipedia : Linked list</a></li>
  <li><a href="https://namu.wiki/w/%EC%97%B0%EA%B2%B0%20%EB%A6%AC%EC%8A%A4%ED%8A%B8">Namu Wiki : Linked List</a></li>
</ul>
:ET