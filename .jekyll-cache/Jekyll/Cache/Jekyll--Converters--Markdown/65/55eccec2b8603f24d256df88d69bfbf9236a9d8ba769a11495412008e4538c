I"²6<h2 id="contents">Contents</h2>
<ul>
  <li><a href="#namespace">Namespace</a></li>
  <li><a href="#structure">Basic Structure</a></li>
  <li><a href="#usage">Usage</a>
    <ul>
      <li><a href="#scope">Scope Resolution Operator(::)</a></li>
      <li><a href="#nested">Nested Namespace</a></li>
      <li><a href="#using">keyword <em>using</em></a></li>
      <li><a href="#nickname">Alias</a></li>
    </ul>
  </li>
  <li><a href="#ref">Reference</a></li>
</ul>
<hr />

<p><br /></p>

<h2 id="namespace-">Namespace <a id="namespace"></a></h2>
<p>I define <em>namespace</em> as a group of unique named items; thus, no two items can have same name under
one same namespace.</p>

<p><br /></p>
<h2 id="basic-structure-">Basic Structure <a id="structure"></a></h2>
<p>The structure of a namespace is same as a class with no access modifier.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="n">Name</span>
<span class="p">{</span>
	<span class="n">vars</span> <span class="p">...</span>
	<span class="k">const</span> <span class="p">...</span>
	<span class="n">func</span> <span class="p">...</span>
	<span class="n">obj</span> <span class="p">...</span>
	<span class="k">namespace</span> <span class="n">anotherName</span>
	<span class="p">{</span>
		<span class="p">...</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>We can create a namespace with the name of your choice(<em>Name</em>) and can include any statements 
including declartion of another namespaces.</p>

<p><br /></p>
<h2 id="usage-">Usage <a id="usage"></a></h2>
<p>Letâ€™s take a look at various examples and learn how to use namespaces in C++.</p>

<h3 id="scope-resolution-operator-">Scope Resolution Operator(::) <a id="scope"></a></h3>
<p>We can use scope operator(::) to access a particular namespace.</p>
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">namespace</span> <span class="n">UCSD</span>
<span class="p">{</span>
	<span class="k">const</span> <span class="n">string</span> <span class="n">UC</span> <span class="o">=</span> <span class="s">"University of California"</span><span class="p">;</span>
	<span class="kt">void</span> <span class="n">printName</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">namespace</span> <span class="n">UCLA</span>
<span class="p">{</span>
	<span class="kt">void</span> <span class="n">printName</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">UCSD</span><span class="o">::</span><span class="n">printName</span><span class="p">();</span>
	<span class="n">UCLA</span><span class="o">::</span><span class="n">printName</span><span class="p">();</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">UCSD</span><span class="o">::</span><span class="n">printName</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">UC</span> <span class="o">+</span> <span class="s">", San Diego"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">UCLA</span><span class="o">::</span><span class="n">printName</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">UCSD</span><span class="o">::</span><span class="n">UC</span> <span class="o">+</span> <span class="s">", Los Angeles"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In <code class="highlighter-rouge">main()</code>, we used scope operator to call <code class="highlighter-rouge">printName()</code> in both <code class="highlighter-rouge">UCSD</code> and <code class="highlighter-rouge">UCLA</code>.
We must use the scope opertor otherwise the compiler will throw an error since its not
obvious which <code class="highlighter-rouge">printName()</code> weâ€™re referring to.</p>

<p>We have a constant string <code class="highlighter-rouge">UC</code> inside the namespace <code class="highlighter-rouge">UCSD</code> but not in <code class="highlighter-rouge">UCLA</code>.
We can see that <code class="highlighter-rouge">UCSD::printName()</code> uses <code class="highlighter-rouge">UC</code> without the scope operator and this is allowed
since theyâ€™re in the same namespace. For <code class="highlighter-rouge">UCLA::printName()</code>, however, scope operator must
be used since its on different namespace.</p>

<h3 id="nested-namespace-">Nested Namespace <a id="nested"></a></h3>
<p>We can declare another namespace within the namespace.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">namespace</span> <span class="n">University</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

	<span class="k">namespace</span> <span class="n">UCSD</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="o">=</span><span class="s">"University of California, San Diego"</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">namespace</span> <span class="n">UCLA</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="o">=</span><span class="s">"University of California, Los Angeles"</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">University</span><span class="o">::</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">University</span><span class="o">::</span><span class="n">UCSD</span><span class="o">::</span><span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">University</span><span class="o">::</span><span class="n">UCLA</span><span class="o">::</span><span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="keyword-using-">keyword <em>using</em> <a id="using"></a></h3>
<p>We can use the keyword <code class="highlighter-rouge">using</code> to make it easier for us to access certain items inside the 
namespace as if its declared locally (or globally).</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">;</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">;</span>

<span class="k">namespace</span> <span class="n">UCSD</span>
<span class="p">{</span>
	<span class="n">string</span> <span class="n">name</span><span class="o">=</span><span class="s">"University of California, San Diego"</span><span class="p">;</span>
	<span class="kt">void</span> <span class="n">printName</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">using</span> <span class="n">UCSD</span><span class="o">::</span><span class="n">name</span><span class="p">;</span>
	<span class="k">using</span> <span class="n">UCSD</span><span class="o">::</span><span class="n">printName</span><span class="p">;</span>

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="n">printName</span><span class="p">();</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We can also apply <code class="highlighter-rouge">using</code> on entrie namespace.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">namespace</span> <span class="n">UCSD</span>
<span class="p">{</span>
	<span class="n">string</span> <span class="n">name</span><span class="o">=</span><span class="s">"University of California, San Diego"</span><span class="p">;</span>
	<span class="kt">void</span> <span class="n">printName</span><span class="p">()</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">using</span> <span class="k">namespace</span> <span class="n">UCSD</span><span class="p">;</span>

	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">name</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="n">printName</span><span class="p">();</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="alias-">Alias <a id="nickname"></a></h3>
<p>You may give new name to your long and complicated structure of a namespace.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">;</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

<span class="k">namespace</span> <span class="n">University</span>
<span class="p">{</span>
	<span class="k">namespace</span> <span class="n">UCSD</span>
	<span class="p">{</span>
		<span class="k">namespace</span> <span class="n">College</span>
		<span class="p">{</span>
			<span class="k">namespace</span> <span class="n">Warren</span>
			<span class="p">{</span>
				<span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
			<span class="p">}</span>

			<span class="k">namespace</span> <span class="n">Sixth</span>
			<span class="p">{</span>
				<span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">namespace</span> <span class="n">College</span> <span class="o">=</span> <span class="n">University</span><span class="o">::</span><span class="n">UCSD</span><span class="o">::</span><span class="n">College</span><span class="p">;</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">College</span><span class="o">::</span><span class="n">Warren</span><span class="o">::</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">College</span><span class="o">::</span><span class="n">Sixth</span><span class="o">::</span><span class="n">num</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>
<h2 id="reference-">Reference <a id="ref"></a></h2>
<ul>
  <li><a href="https://wikidocs.net/14043">wikidocs.net</a></li>
</ul>
:ET