I"<h2 id="이진-탐색-알고리즘-이란"><strong>이진 탐색 알고리즘 이란?</strong></h2>

<p>이진 탐색/검색(Binary Search) 알고리즘은 <strong>정렬된 리스트</strong>에서 특정한 값의 위치를 찾는 알고리즘이다.</p>

<p>처음 중간 값을 임의로 선택한 후, 그 값과 찾고자 하는 값을 비교하여 불필요한 부분은 과감하게 무시한다. 불필요한 부분이란 임의로 선택한 데이터의 왼쪽또는 오른쪽에 위치한 데이터들을 말하는데 이는 리스트 크기에 절반에 해당한다.</p>

<p><img src="/assets/images/algorithm/search/search-binary-search-1.jpg" alt="Binary Search" />
만약 찾으려는 숫자가 <code class="highlighter-rouge">5</code>보다 클 경우, <code class="highlighter-rouge">5</code>왼쪽에 있는 모든 데이터는 무시해도 되며 그 반대의 경우도 마찬가지다. 즉, 매 회마다 크기를 절반으로 줄이는 것이 가능하며 덕분에 순차탐색(Linear Search)보다 상당히 빠르게 값을 찾을 수 있다.</p>

<p><br /></p>

<h2 id="ruby-구현-코드"><strong>Ruby 구현 코드</strong></h2>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">binarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">)</span>
    <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="p">(</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>

    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">low</span> <span class="o">&gt;</span> <span class="n">high</span>

    <span class="k">if</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">val</span>
        <span class="k">return</span> <span class="n">mid</span>
    <span class="k">elsif</span> <span class="n">arr</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">val</span>
        <span class="n">binarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">low</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">high</span><span class="p">)</span>
    <span class="k">else</span>
        <span class="n">binarySearch</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">low</span><span class="p">,</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p><a href="https://github.com/muicode/coding/blob/master/algorithm/search/binsearch.cpp">C++ 코드 보기</a></p>

<p><br /></p>

<h2 id="설명"><strong>설명</strong></h2>

<p><em>정렬은 오름차순으로 되어 있다 가정하고 설명한다. 만약 내림차순일 경우 비교식만 바꾸면 된다</em>.</p>

<p>중간 값을 구하기 위한 공식: <code class="highlighter-rouge">mid = low + (high - low) / 2;</code></p>

<p>보통 중간 값을 구할 때 사용하는 공식으로 <code class="highlighter-rouge">mid = (low + high) / 2</code>를 사용하는데 이는 오버플로우가
발생 할 위험이 있다. 물론 루비와 같이 큰 수의 제약이 없는 경우 상관은 없지만 알고 있다는게 중요하다.</p>

<p>중간 값을 구한 후 찾는 값(<code class="highlighter-rouge">target</code>)과 비교를 한다. 이 때 발생 할 수 있는 경우의 수는 네 가지.</p>
<ol>
  <li>중간 값이 <code class="highlighter-rouge">target</code>인 경우
    <ul>
      <li>바로 <code class="highlighter-rouge">target</code>의 색인(index)을 반환한다.
 <img src="/assets/images/algorithm/search/search-binary-search-2.jpg" alt="Binary Search" /></li>
    </ul>
  </li>
  <li>중간 값이 <code class="highlighter-rouge">target</code>보다 클 경우
    <ul>
      <li><code class="highlighter-rouge">target</code>이 중간 값 <strong>왼쪽</strong>에 위치하므로 <code class="highlighter-rouge">high</code>의 값을 <code class="highlighter-rouge">middle - 1</code>으로 바꾸고 값을 다시 비교한다.<br />
<img src="/assets/images/algorithm/search/search-binary-search-3.jpg" alt="Binary Search" /></li>
    </ul>
  </li>
  <li>중간 값이 <code class="highlighter-rouge">target</code>보다 작을 경우
    <ul>
      <li><code class="highlighter-rouge">target</code>이 중간 값 <strong>오른쪽</strong>에 위치하므로 <code class="highlighter-rouge">low</code>의 값을 <code class="highlighter-rouge">middle + 1</code>으로 바꾸고 값을 다시 비교한다.<br />
 <img src="/assets/images/algorithm/search/search-binary-search-4.jpg" alt="Binary Search" /></li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">target</code>이 존재하지 않을 경우
    <ul>
      <li>리스트의 크기를 계속해서 반으로 나누다보면 <code class="highlighter-rouge">low</code>가 <code class="highlighter-rouge">high</code>보다 커지는 시기가 있는데 바로 
 <code class="highlighter-rouge">target</code>이 리스트에 존재하지 않을 때다. 이 때는 <code class="highlighter-rouge">-1</code>을 반환한다.</li>
    </ul>
  </li>
</ol>
:ET