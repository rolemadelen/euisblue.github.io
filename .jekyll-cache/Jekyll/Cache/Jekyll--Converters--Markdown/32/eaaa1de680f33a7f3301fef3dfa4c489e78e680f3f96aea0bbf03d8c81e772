I"S.<p><a href="https://www.dailycodingproblem.com">Daily Coding Problem</a>을 구독하면 매일 한 개의 코딩 문제를 이메일로 받을 수 있습니다.</p>

<h2 id="dcp-6"><strong>DCP #6</strong></h2>
<p>이 문제는 구글 면접에서 나온 문제입니다.</p>

<p>보통 이중 연결 리스트는 <code class="highlighter-rouge">next</code>와 <code class="highlighter-rouge">prev</code> 두 개의 상태를 가지는 노드를 가지고 구현을 합니다. 하지만 보다 효율적으로 메모리를 사용하기 위해 두 개의 상태를 하나로 합쳐서 구현할 수 있는데 이를 XOR 연결 리스트라고 합니다. XOR 연결 리스트의 노드는 이전 노드와 다음 노드의 주소를 XOR한 값을 
가지고 있는 <code class="highlighter-rouge">both</code>한 개의 상태만을 사용합니다.</p>

<p><img src="/assets/images/dcp/problem6/xor.png" alt="XOR list visual" /></p>

<p>그럼 지금부터 XOR 연결 리스트를 사용해서 리스트 끝에 노드를 추가하는 <code class="highlighter-rouge">add(element)</code>함수와 주어진 색인의 노드를 반환하는 <code class="highlighter-rouge">get(index)</code>함수를 구현해주세요.</p>

<p>파이썬과 같이 포인터가 없는 언어의 경우 노드의 주소를 반환하는 함수 <code class="highlighter-rouge">get_pointer</code>와 주소로 부터 다시 노드를 참조해주는 함수 <code class="highlighter-rouge">dereference_pointer</code>가 있다고 가정하여도 좋습니다.</p>

<p><a href="en-dcp-6.html#dcp6">원문 확인</a></p>

<p><br /></p>

<h2 id="코드"><strong>코드</strong></h2>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span>
    <span class="nb">attr_reader</span> <span class="ss">:val</span>
    <span class="nb">attr_accessor</span> <span class="ss">:npx</span>

    <span class="k">def</span> <span class="nf">initialize</span> <span class="n">data</span>
        <span class="vi">@val</span> <span class="o">=</span> <span class="n">data</span>
        <span class="vi">@npx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">XORLinkedList</span>
    <span class="nb">attr_reader</span> <span class="ss">:root</span><span class="p">,</span> <span class="ss">:tail</span><span class="p">,</span> <span class="ss">:nodes</span>

    <span class="k">def</span> <span class="nf">initialize</span> <span class="n">data</span>
        <span class="vi">@root</span> <span class="o">=</span> <span class="no">Node</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="vi">@nodes</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">add</span> <span class="n">element</span>
        <span class="n">new_node</span> <span class="o">=</span> <span class="no">Node</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>

        <span class="k">if</span> <span class="vi">@root</span><span class="p">.</span><span class="nf">npx</span> <span class="o">==</span> <span class="mi">0</span>
            <span class="vi">@root</span><span class="p">.</span><span class="nf">npx</span> <span class="o">=</span> <span class="n">get_pointer</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>
            <span class="n">new_node</span><span class="p">.</span><span class="nf">npx</span> <span class="o">=</span> <span class="n">get_pointer</span><span class="p">(</span><span class="vi">@root</span><span class="p">)</span>
        <span class="k">elsif</span>
            <span class="n">curr_node</span> <span class="o">=</span> <span class="n">deref_pointer</span><span class="p">(</span><span class="vi">@root</span><span class="p">.</span><span class="nf">npx</span><span class="p">)</span>
            <span class="n">prev_addr</span> <span class="o">=</span> <span class="n">get_pointer</span><span class="p">(</span><span class="vi">@root</span><span class="p">)</span>
            
            <span class="k">while</span> <span class="n">curr_node</span><span class="p">.</span><span class="nf">npx</span> <span class="o">!=</span> <span class="n">prev_addr</span>
                <span class="n">next_node</span> <span class="o">=</span> <span class="n">deref_pointer</span><span class="p">(</span><span class="n">curr_node</span><span class="p">.</span><span class="nf">npx</span> <span class="o">^</span> <span class="n">prev_addr</span><span class="p">)</span>
                <span class="n">prev_addr</span> <span class="o">=</span> <span class="n">get_pointer</span><span class="p">(</span><span class="n">curr_node</span><span class="p">)</span>
                <span class="n">curr_node</span> <span class="o">=</span> <span class="n">next_node</span>
            <span class="k">end</span>

            <span class="n">new_node</span><span class="p">.</span><span class="nf">npx</span> <span class="o">=</span> <span class="n">get_pointer</span><span class="p">(</span><span class="n">curr_node</span><span class="p">)</span>
            <span class="n">curr_node</span><span class="p">.</span><span class="nf">npx</span> <span class="o">=</span> <span class="n">prev_addr</span> <span class="o">^</span> <span class="n">get_pointer</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>
        <span class="k">end</span>

        <span class="vi">@nodes</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">0</span>
            <span class="k">return</span> <span class="vi">@root</span><span class="p">.</span><span class="nf">val</span>
        <span class="k">end</span>

        <span class="n">curr</span> <span class="o">=</span> <span class="n">deref_pointer</span><span class="p">(</span><span class="vi">@root</span><span class="p">.</span><span class="nf">npx</span><span class="p">)</span>
        <span class="n">prev_addr</span> <span class="o">=</span> <span class="n">get_pointer</span><span class="p">(</span><span class="vi">@root</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="p">(</span><span class="mi">1</span> <span class="o">...</span> <span class="n">index</span><span class="p">)</span> <span class="k">do</span>
            <span class="n">next_node</span> <span class="o">=</span> <span class="n">deref_pointer</span><span class="p">(</span><span class="n">prev_addr</span> <span class="o">^</span> <span class="n">curr</span><span class="p">.</span><span class="nf">npx</span><span class="p">)</span>   
            <span class="n">prev_addr</span> <span class="o">=</span> <span class="n">get_pointer</span><span class="p">(</span><span class="n">curr</span><span class="p">)</span>
            <span class="n">curr</span> <span class="o">=</span> <span class="n">next_node</span>
        <span class="k">end</span>

        <span class="n">curr</span><span class="p">.</span><span class="nf">val</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">get_pointer</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="n">node</span><span class="p">.</span><span class="nf">object_id</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">deref_pointer</span><span class="p">(</span><span class="n">node_addr</span><span class="p">)</span>
    <span class="no">ObjectSpace</span><span class="p">.</span><span class="nf">_id2ref</span><span class="p">(</span><span class="n">node_addr</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">list</span> <span class="o">=</span> <span class="no">XORLinkedList</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"A"</span><span class="p">)</span>
<span class="n">list</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="s2">"B"</span><span class="p">)</span>
<span class="n">list</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="s2">"C"</span><span class="p">)</span>
<span class="n">list</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="s2">"D"</span><span class="p">)</span>
<span class="n">list</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="s2">"E"</span><span class="p">)</span>

<span class="nb">puts</span> <span class="n">list</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="c1"># =&gt; A</span>
<span class="nb">puts</span> <span class="n">list</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># =&gt; B</span>
<span class="nb">puts</span> <span class="n">list</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="c1"># =&gt; C</span>
<span class="nb">puts</span> <span class="n">list</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c1"># =&gt; D</span>
<span class="nb">puts</span> <span class="n">list</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c1"># =&gt; E</span>
</code></pre></div></div>

<p><a href="https://github.com/muicode/DCP/blob/master/problem6/dcp6.c">C언어로 작성된 코드를 보고 싶으면 클릭!</a></p>

<p><br /></p>

<h2 id="관련-글-"><strong>관련 글</strong> <a id="related"></a></h2>

<div class="relatedPosts">





  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      ┈ <a href="/dcp/2019/10/27/ko-dcp-7.html">DCP 7: 메세지 해독하기</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      ┈ <a href="/dcp/2019/10/20/ko-dcp-5.html">DCP 5: CAR과 CDR</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      ┈ <a href="/dcp/2019/09/21/ko-dcp-4.html">DCP 4: 가장 낮은 양수</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      ┈ <a href="/dcp/2019/09/20/ko-dcp-3.html">DCP 3: 직렬화 &amp; 역직렬화</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      ┈ <a href="/dcp/2019/09/19/ko-dcp-2.html">DCP 2: 새로운 배열</a>
      </div>
      
      
        

</div>
:ET