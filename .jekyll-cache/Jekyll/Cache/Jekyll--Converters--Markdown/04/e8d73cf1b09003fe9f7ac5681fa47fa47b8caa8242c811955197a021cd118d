I"ò&<h2 id="contents">Contents</h2>
<ul>
  <li><a href="#struct">Basic Structure</a></li>
  <li><a href="#debugopt">Debug Options</a>
    <ul>
      <li><a href="#exec">-D exec</a></li>
      <li><a href="#help">-D help</a></li>
      <li><a href="#treeopt">-D tree &amp; -D opt</a></li>
      <li><a href="#rates">-D rates</a></li>
      <li><a href="#search">-D search</a></li>
      <li><a href="#stat">-D stat</a></li>
    </ul>
  </li>
  <li><a href="#olevel">Optimizations</a>
    <ul>
      <li><a href="#o01">-O0 &amp; -O1</a></li>
      <li><a href="#o2">-O2</a></li>
      <li><a href="#o3">-O3</a></li>
    </ul>
  </li>
  <li><a href="#related">Related Posts</a></li>
  <li><a href="#ref">Reference</a></li>
</ul>
<hr />

<p><br /></p>

<h2 id="basic-structure-">Basic Structure <a id="struct"></a></h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="o">[</span><span class="nt">-H</span><span class="o">]</span> <span class="o">[</span><span class="nt">-L</span><span class="o">]</span> <span class="o">[</span><span class="nt">-P</span><span class="o">]</span> <span class="o">[</span><span class="nt">-D</span> debugopt] <span class="o">[</span><span class="nt">-Olevel</span><span class="o">]</span> <span class="o">[</span>path] <span class="o">[</span>expression]
</code></pre></div></div>

<p>We examined first three options (H, L, and P) previously (<a href="../en-linux-howto-find_command_symlink">find Command [1]</a>), which was about symbolic links.<br />
In this post, We will go through the next two options: <code class="highlighter-rouge">-D</code>(debug) and <code class="highlighter-rouge">-O</code>(optimization).</p>

<p><br /></p>
<h2 id="debug-options-">Debug Options <a id="debugopt"></a></h2>

<p>Every examples shown under this section are executed on the following directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">test</span>/
â”œâ”€â”€ blog.c  <span class="c"># "blog.c: hello world"</span>
â””â”€â”€ hello.c <span class="c"># "hello.c: hello world"</span>
</code></pre></div></div>

<p><br /></p>
<h3 id="-d-exec-">-D exec <a id="exec"></a></h3>
<p>With every files or directories we found, we can use <code class="highlighter-rouge">-exec</code> or <code class="highlighter-rouge">-execdir</code> to execute some actions
on each of the files or directories. When <code class="highlighter-rouge">exec</code> option is used, it examines all the tasks done by <code class="highlighter-rouge">-exec</code> or <code class="highlighter-rouge">-execdir</code>.</p>

<p>For example, we can apply <code class="highlighter-rouge">cat</code> on every files we found:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>find <span class="nb">test</span>/ <span class="nt">-type</span> f <span class="nt">-execdir</span> <span class="nb">cat</span> <span class="o">{}</span> +

hello.c: hello world
blog.c: hello world
</code></pre></div></div>

<p>Lets run the same command with <code class="highlighter-rouge">-D exec</code> attached.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ find -D exec . -type f -execdir cat {} +

Outstanding execdirs:-execdir multiple 3 args: cat ./hello.c ./blog.c 
hello.c: hello world
blog.c: hello world
</code></pre></div></div>

<p>We can observe that <code class="highlighter-rouge">cat</code> command has been executed to files found by <code class="highlighter-rouge">find</code>.</p>

<p><br /></p>
<h3 id="-d-help-">-D help <a id="help"></a></h3>
<p>Simply shows all possible arguments for debug options.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>find <span class="nt">-D</span> <span class="nb">help

</span>Valid arguments <span class="k">for</span> <span class="nt">-D</span>:
<span class="nb">exec       </span>Show diagnostic information relating to <span class="nt">-exec</span>, <span class="nt">-execdir</span>, <span class="nt">-ok</span> and <span class="nt">-okdir</span>
<span class="nb">help       </span>Explain the various <span class="nt">-D</span> options
... 
</code></pre></div></div>

<p><br /></p>
<h3 id="-d-tree---d-opt-">-D tree &amp; -D opt <a id="treeopt"></a></h3>
<p><code class="highlighter-rouge">tree</code> option displays the expression tree in both normal and optimized version.</p>

<p><code class="highlighter-rouge">opt</code> option functions same as <code class="highlighter-rouge">tree</code> but it shows more detail information regarding optimizations.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>find <span class="nt">-D</span> opt <span class="nt">-type</span> f

Eval Tree:
..
Normalized Eval Tree:
..
Optimized Eval Tree:
..
Optimized <span class="nb">command </span>line:
<span class="o">[</span>need <span class="nb">type</span><span class="o">]</span> <span class="nt">-type</span> f <span class="o">[</span>est success rate 0.875] <span class="nt">-a</span> <span class="o">[</span>est success rate 0.875] <span class="nt">-print</span> <span class="o">[</span>est success rate 1] 
./hello.c
./blog.c
</code></pre></div></div>

<p><br /></p>
<h3 id="-d-rates-">-D rates <a id="rates"></a></h3>

<p>Displays the rate of success and failure of predicate evaluation.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>find <span class="nt">-D</span> rates <span class="nb">test</span>/ <span class="nt">-type</span> f

<span class="nb">test</span>/hello.c
<span class="nb">test</span>/blog.c
Predicate success rates after completion:
<span class="o">[</span>need <span class="nb">type</span><span class="o">]</span> <span class="nt">-type</span> f <span class="o">[</span>est success rate 0.875] <span class="o">[</span>real success rate 2/3<span class="o">=</span>0.6667] <span class="nt">-a</span> <span class="o">[</span>est success rate 0.875] <span class="o">[</span>real success rate 2/3<span class="o">=</span>0.6667] <span class="nt">-print</span> <span class="o">[</span>est success rate 1] <span class="o">[</span>real success rate 2/2<span class="o">=</span>1]   
</code></pre></div></div>

<p><br /></p>
<h3 id="-d-search-">-D search <a id="searh"></a></h3>

<p>Navigates the tree verbosely.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>find <span class="nt">-D</span> search <span class="nb">test</span>/ <span class="nt">-type</span> f

consider_visiting <span class="o">(</span>early<span class="o">)</span>: â€˜test/â€™: <span class="nv">fts_info</span><span class="o">=</span>FTS_D , <span class="nv">fts_level</span><span class="o">=</span> 0, <span class="nv">prev_depth</span><span class="o">=</span><span class="nt">-2147483648</span> <span class="nv">fts_path</span><span class="o">=</span>â€˜test/
â€™, <span class="nv">fts_accpath</span><span class="o">=</span>â€˜test/â€™
consider_visiting <span class="o">(</span>late<span class="o">)</span>: â€˜test/â€™: <span class="nv">fts_info</span><span class="o">=</span>FTS_D , <span class="nv">isdir</span><span class="o">=</span>1 <span class="nv">ignore</span><span class="o">=</span>0 <span class="nv">have_stat</span><span class="o">=</span>1 <span class="nv">have_type</span><span class="o">=</span>1 
consider_visiting <span class="o">(</span>early<span class="o">)</span>: â€˜test/hello.câ€™: <span class="nv">fts_info</span><span class="o">=</span>FTS_NSOK, <span class="nv">fts_level</span><span class="o">=</span> 1, <span class="nv">prev_depth</span><span class="o">=</span>0 <span class="nv">fts_path</span><span class="o">=</span>â€˜test/hello.câ€™, <span class="nv">fts_accpath</span><span class="o">=</span>â€˜hello.câ€™
...
</code></pre></div></div>

<p><br /></p>
<h2 id="optimizations-">Optimizations <a id="olevel"></a></h2>
<p>This option is used to optimize the query performance. It reorder tests to reduce the execution 
time on each predicate while preserving the overall effect.</p>

<h3 id="-o0---o1-">-O0 &amp; -O1 <a id="o01"></a></h3>
<p><code class="highlighter-rouge">O0</code> has same effect as <code class="highlighter-rouge">O1</code> and this is the default optimization. <br />
It evaluate tests based only on file names(e.g. <code class="highlighter-rouge">-name</code> and <code class="highlighter-rouge">-regex</code>) first.</p>

<h3 id="-o2-">-O2 <a id="o2"></a></h3>
<p><code class="highlighter-rouge">-type</code> or <code class="highlighter-rouge">-xtype</code> tests are evaluated after tests based only on file names are evaluated, but
before any tests that require information from the inode.</p>

<h3 id="-o3-">-O3 <a id="o3"></a></h3>
<p>Full cost-based optimization is enabled. It reorder predicates if needed so that the cheapest 
(or fastest) predicates are evaluated earlier than the expensive one. Also predicates that are
likely to succeed (e.g. <code class="highlighter-rouge">-o</code>) will be evaluated first than one likely to fail (e.g. `-a).</p>

<p>If cost-based optimization does not improve any performance, it will be removed. In contrast, 
   optimizations that prove to improve the performance may be enabled 
   at lower optimization levels over time.</p>

<p><br /></p>
<h2 id="related-posts-">Related Posts <a id="related"></a></h2>

<ul>
  <li><a href="/linux/2019/02/21/en-linux-howto-find_command_symlink.html">[Linux] find Command [1]</a></li>
</ul>

<p><br /></p>
<h2 id="reference-">Reference <a id="ref"></a></h2>
<ul>
  <li><a href="https://linux.die.net/man/1/find">find(1) - linux man page</a></li>
  <li><a href="https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html">Compiler Optimization</a></li>
</ul>
:ET