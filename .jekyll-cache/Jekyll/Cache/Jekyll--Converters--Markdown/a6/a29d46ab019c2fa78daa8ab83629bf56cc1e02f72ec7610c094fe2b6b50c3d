I".<p><a href="https://www.dailycodingproblem.com">Daily Coding Problem</a>ブログ購読をすると、毎日一つのプログラミング問題をメールにて送信します。</p>

<h2 id="dcp-6"><strong>DCP #6</strong></h2>

<p>この問題はGoogleの面接からの質問です。</p>

<p>普通の二重連結リストのノードは<code class="highlighter-rouge">next</code>と<code class="highlighter-rouge">prev</code>、この２つの状態を持っています. だがもっと효율적にメモリを使うためXOR連結リストというもを作りました。
このリストは<code class="highlighter-rouge">both</code>という状態ただ一つを使います。<code class="highlighter-rouge">both</code>の値は<code class="highlighter-rouge">prev XOR next</code>です。</p>

<p><img src="/assets/images/dcp/problem6/xor.png" alt="XOR list visual" /></p>

<p>ではXOR連結リストを使ってリストの最後にノードを追加する]<code class="highlighter-rouge">add(element)</code>関数と与えられたインデックスの要素を返す<code class="highlighter-rouge">get(index)</code>関数を実装してください。</p>

<p>Pythonようにポインタがない言語の場合、ノードのメモリを返す<code class="highlighter-rouge">get_pointer</code>関数と、メモリからノードに変換させる関数<code class="highlighter-rouge">dereference_pointer</code>があると仮定しても大丈夫です。</p>

<p><a href="en-dcp-6.html#dcp6">原文を読む</a></p>

<p><br /></p>

<h2 id="コード"><strong>コード</strong></h2>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span>
    <span class="nb">attr_reader</span> <span class="ss">:val</span>
    <span class="nb">attr_accessor</span> <span class="ss">:npx</span>

    <span class="k">def</span> <span class="nf">initialize</span> <span class="n">data</span>
        <span class="vi">@val</span> <span class="o">=</span> <span class="n">data</span>
        <span class="vi">@npx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">XORLinkedList</span>
    <span class="nb">attr_reader</span> <span class="ss">:root</span><span class="p">,</span> <span class="ss">:tail</span><span class="p">,</span> <span class="ss">:nodes</span>

    <span class="k">def</span> <span class="nf">initialize</span> <span class="n">data</span>
        <span class="vi">@root</span> <span class="o">=</span> <span class="no">Node</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="vi">@nodes</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">add</span> <span class="n">element</span>
        <span class="n">new_node</span> <span class="o">=</span> <span class="no">Node</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>

        <span class="k">if</span> <span class="vi">@root</span><span class="p">.</span><span class="nf">npx</span> <span class="o">==</span> <span class="mi">0</span>
            <span class="vi">@root</span><span class="p">.</span><span class="nf">npx</span> <span class="o">=</span> <span class="n">get_pointer</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>
            <span class="n">new_node</span><span class="p">.</span><span class="nf">npx</span> <span class="o">=</span> <span class="n">get_pointer</span><span class="p">(</span><span class="vi">@root</span><span class="p">)</span>
        <span class="k">elsif</span>
            <span class="n">curr_node</span> <span class="o">=</span> <span class="n">deref_pointer</span><span class="p">(</span><span class="vi">@root</span><span class="p">.</span><span class="nf">npx</span><span class="p">)</span>
            <span class="n">prev_addr</span> <span class="o">=</span> <span class="n">get_pointer</span><span class="p">(</span><span class="vi">@root</span><span class="p">)</span>
            
            <span class="k">while</span> <span class="n">curr_node</span><span class="p">.</span><span class="nf">npx</span> <span class="o">!=</span> <span class="n">prev_addr</span>
                <span class="n">next_node</span> <span class="o">=</span> <span class="n">deref_pointer</span><span class="p">(</span><span class="n">curr_node</span><span class="p">.</span><span class="nf">npx</span> <span class="o">^</span> <span class="n">prev_addr</span><span class="p">)</span>
                <span class="n">prev_addr</span> <span class="o">=</span> <span class="n">get_pointer</span><span class="p">(</span><span class="n">curr_node</span><span class="p">)</span>
                <span class="n">curr_node</span> <span class="o">=</span> <span class="n">next_node</span>
            <span class="k">end</span>

            <span class="n">new_node</span><span class="p">.</span><span class="nf">npx</span> <span class="o">=</span> <span class="n">get_pointer</span><span class="p">(</span><span class="n">curr_node</span><span class="p">)</span>
            <span class="n">curr_node</span><span class="p">.</span><span class="nf">npx</span> <span class="o">=</span> <span class="n">prev_addr</span> <span class="o">^</span> <span class="n">get_pointer</span><span class="p">(</span><span class="n">new_node</span><span class="p">)</span>
        <span class="k">end</span>

        <span class="vi">@nodes</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="mi">0</span>
            <span class="k">return</span> <span class="vi">@root</span><span class="p">.</span><span class="nf">val</span>
        <span class="k">end</span>

        <span class="n">curr</span> <span class="o">=</span> <span class="n">deref_pointer</span><span class="p">(</span><span class="vi">@root</span><span class="p">.</span><span class="nf">npx</span><span class="p">)</span>
        <span class="n">prev_addr</span> <span class="o">=</span> <span class="n">get_pointer</span><span class="p">(</span><span class="vi">@root</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="p">(</span><span class="mi">1</span> <span class="o">...</span> <span class="n">index</span><span class="p">)</span> <span class="k">do</span>
            <span class="n">next_node</span> <span class="o">=</span> <span class="n">deref_pointer</span><span class="p">(</span><span class="n">prev_addr</span> <span class="o">^</span> <span class="n">curr</span><span class="p">.</span><span class="nf">npx</span><span class="p">)</span>   
            <span class="n">prev_addr</span> <span class="o">=</span> <span class="n">get_pointer</span><span class="p">(</span><span class="n">curr</span><span class="p">)</span>
            <span class="n">curr</span> <span class="o">=</span> <span class="n">next_node</span>
        <span class="k">end</span>

        <span class="n">curr</span><span class="p">.</span><span class="nf">val</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">get_pointer</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="n">node</span><span class="p">.</span><span class="nf">object_id</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">deref_pointer</span><span class="p">(</span><span class="n">node_addr</span><span class="p">)</span>
    <span class="no">ObjectSpace</span><span class="p">.</span><span class="nf">_id2ref</span><span class="p">(</span><span class="n">node_addr</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">list</span> <span class="o">=</span> <span class="no">XORLinkedList</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"A"</span><span class="p">)</span>
<span class="n">list</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="s2">"B"</span><span class="p">)</span>
<span class="n">list</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="s2">"C"</span><span class="p">)</span>
<span class="n">list</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="s2">"D"</span><span class="p">)</span>
<span class="n">list</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="s2">"E"</span><span class="p">)</span>

<span class="nb">puts</span> <span class="n">list</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="c1"># =&gt; A</span>
<span class="nb">puts</span> <span class="n">list</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># =&gt; B</span>
<span class="nb">puts</span> <span class="n">list</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="c1"># =&gt; C</span>
<span class="nb">puts</span> <span class="n">list</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>  <span class="c1"># =&gt; D</span>
<span class="nb">puts</span> <span class="n">list</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>  <span class="c1"># =&gt; E</span>
</code></pre></div></div>

<p><a href="https://github.com/muicode/DCP/blob/master/problem6/dcp6.c">C言語のコードはこちらへ</a></p>

<p><br /></p>

<h2 id="関連記事"><strong>関連記事</strong></h2>

<div class="relatedPosts">





  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      ┈ <a href="/dcp/2019/10/27/ja-dcp-7.html">DCP 7・メッセージ解読</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      ┈ <a href="/dcp/2019/10/20/ja-dcp-5.html">DCP 5・CARとCDR</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      ┈ <a href="/dcp/2019/09/21/ja-dcp-4.html">DCP 4・一番低い正数</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      ┈ <a href="/dcp/2019/09/20/ja-dcp-3.html">DCP 3・直列化 ＆ 逆直列化</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      ┈ <a href="/dcp/2019/09/19/ja-dcp-2.html">DCP 2・新しい配列</a>
      </div>
      
      
        

</div>
:ET