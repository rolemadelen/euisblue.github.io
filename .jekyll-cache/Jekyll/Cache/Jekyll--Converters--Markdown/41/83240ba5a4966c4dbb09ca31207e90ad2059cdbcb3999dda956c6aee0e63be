I"G-<h2 id="부분-문자열-회문"><strong>부분 문자열 회문</strong></h2>
<p>지난 글에서 <a href="/algorithm/2019/11/13/ko-palindrome">회문 알고리즘</a>에 대해 알아보았다.</p>

<p>회문에 대해 아주 간단히 설명하자면 앞뒤 어느쪽으로 읽어도 같은 단어 또는 문장인것을 회문이라고 한다.
회문 알고리즘의 경우 주어진 문자열 전체가 회문인지 아닌지 확인하는 알고리즘으로 <code class="highlighter-rouge">aba</code>는 
회문이지만 <code class="highlighter-rouge">aabad</code>는 회문이 아니다.</p>

<p><code class="highlighter-rouge">aabad</code>는 회문이 아니지만 부분 문자열인 <code class="highlighter-rouge">aa</code>와 <code class="highlighter-rouge">aba</code>는 회문이고, 여기서 <code class="highlighter-rouge">aba</code>가 길이 3으로 가장 길다.</p>

<p>최장 부분 문자열 회문을 구하는 방법에는 여러가지가 있는데 여기서는 동적 계획법(Dynamic Programming)을 이용한 방법을 소개한다.</p>

<p><br /></p>

<h2 id="c-코드"><strong>C++ 코드</strong></h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
#include &lt;string.h&gt;
#include &lt;cstdio&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">size_t</span> <span class="nf">longestPalindrome</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
    <span class="kt">size_t</span> <span class="n">maxLength</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="c1">// 길이 1인 문자열은 전부 회문이다.</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">maxLength</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 회문 정보를 저장 할 테이블</span>
    <span class="c1">// 자기 자신은 언제나 회문</span>
    <span class="kt">bool</span> <span class="n">table</span><span class="p">[</span><span class="n">size</span><span class="p">][</span><span class="n">size</span><span class="p">];</span>
	<span class="n">memset</span><span class="p">(</span><span class="n">table</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">table</span><span class="p">));</span> 
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// 길이 2인 문자열이 회문인지 판별</span>
    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
        <span class="p">{</span>
            <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
            <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="n">maxLength</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">//  k =&gt; 최장 부분 문자열 회문의 길이</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;=</span><span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="o">-</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">k</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">i</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="nb">true</span> <span class="o">&amp;&amp;</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">str</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
            <span class="p">{</span>
                <span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>

                <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="o">&gt;</span> <span class="n">maxLength</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">maxLength</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
                    <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"longest substr: "</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">start</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">start</span><span class="o">+</span><span class="n">maxLength</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%c"</span><span class="p">,</span> <span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">maxLength</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="설명"><strong>설명</strong></h2>

<p>코드는 복잡해 보이지만 하는 일은 간단하다.</p>

<p><img src="/assets/images/algorithm/palindrome/dp/dp-1.jpg" alt="Longest Palindromic Substring Process" /></p>

<p><code class="highlighter-rouge">i</code>에서 길이 <code class="highlighter-rouge">k</code>의 문자열이 회문인지 확인하는 과정을 반복한다. <br />
하지만 <code class="highlighter-rouge">i</code>에서 <code class="highlighter-rouge">j</code>의 부분 문자열이 회문인지 아닌지 어떻게 판별하는 것일까?</p>

<p><code class="highlighter-rouge">table[i][j]</code>는 <code class="highlighter-rouge">i</code>에서 <code class="highlighter-rouge">j</code>의 부분 문자열이 회문이면 <code class="highlighter-rouge">True</code> 아니면 <code class="highlighter-rouge">False</code>의 값을 가진다.</p>

<p>아래의 그림을 보자.</p>

<p><img src="/assets/images/algorithm/palindrome/dp/dp-2.jpg" alt="Longest Palindromic Substring Process" /></p>

<p>자기자신(<code class="highlighter-rouge">[0][0]</code> ~ <code class="highlighter-rouge">[N-1][N-1]</code>)은 언제나 회문이므로 <code class="highlighter-rouge">True</code>의 값으로 초기화한다.</p>

<p><code class="highlighter-rouge">i</code>에서 <code class="highlighter-rouge">j</code>가 회문이라면 <code class="highlighter-rouge">i+1</code>에서 <code class="highlighter-rouge">j-1</code>또한 회문이여야 한다. 
그렇기 때문에 <code class="highlighter-rouge">table[i+1][j-1]</code>이 <code class="highlighter-rouge">True</code>인지 확인 한 다음, <code class="highlighter-rouge">str[i]</code>과 <code class="highlighter-rouge">str[j]</code>가 같은지 확인하면 된다.</p>

<p><img src="/assets/images/algorithm/palindrome/dp/dp-3.jpg" alt="Longest Palindromic Substring Process" /></p>

<p>예를들어 <code class="highlighter-rouge">abcba</code>가 회문인지 확인하기 전, 내부 문자열인 <code class="highlighter-rouge">bcb</code>가 회문인지 확인해야한다. 
위 그림을 보면 <code class="highlighter-rouge">table[2][4]</code>는 <code class="highlighter-rouge">True</code>로 <code class="highlighter-rouge">bcb</code>는 회문이 맞고, <code class="highlighter-rouge">str[1]</code>과 <code class="highlighter-rouge">str[5]</code>또한 둘다 <code class="highlighter-rouge">a</code>로 
같은 문자이므로 <code class="highlighter-rouge">abcba</code>가 회문임을 알 수 있다.</p>
:ET