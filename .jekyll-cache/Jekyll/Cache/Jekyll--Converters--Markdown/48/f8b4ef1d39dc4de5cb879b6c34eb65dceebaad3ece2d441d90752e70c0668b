I"Ò#<h2 id="contents">Contents</h2>
<ul>
  <li><a href="#concept">Concept</a></li>
  <li><a href="#op">Operations</a></li>
  <li><a href="#implement">Implementation</a></li>
  <li><a href="#app">Applications of Priority Queue</a></li>
  <li><a href="#ref">Reference</a></li>
</ul>
<hr />

<p><br /></p>

<h2 id="concept-">Concept <a id="concept"></a></h2>
<p>Priority Queue and Queue shares similar or same structure but thereâ€™s a difference in how data
are stored. Queue follows First-In First-Out(FIFO) mechanism but priority queue orders data
based on each nodeâ€™s priority. So the 1st node could be processed later than the 100th node 
due it its priority.</p>

<p>Priority Queue can be implemented using array, linkedin, or heap.</p>

<p>Array and Linked List Time Complexity:</p>
<ul>
  <li>Insert - O(1)</li>
  <li>GetHighestPriority - O(n)</li>
  <li>DeleteHighestPriority - O(n)</li>
</ul>

<p>Heap Time Complexity:</p>
<ul>
  <li>Insert - O(logn) or O(1) amortized</li>
  <li>GetHighestPriority - O(1)</li>
  <li>DeleteHighestPriority - O(logn)</li>
</ul>

<p><br /></p>
<h2 id="operations-">Operations <a id="op"></a></h2>
<ul>
  <li><strong>Push(..)</strong> : inserts data and sorts the undelying container</li>
  <li><strong>Pop(..)</strong> : removes the data</li>
  <li><strong>GetHighestPriority(..)</strong> : returns the highest priority data</li>
  <li><strong>GetSmallestPriority(..)</strong> : returns the lowest priority data</li>
</ul>

<p><br /></p>
<h2 id="implementation-">Implementation <a id="implement"></a></h2>

<p>I used linked list to implement the priority queue. The node structure looks like the following:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span> <span class="n">node_t</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">PNode</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">PNode</span> <span class="o">*</span><span class="n">prev</span><span class="p">;</span>
    <span class="n">Element</span> <span class="n">data</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">priority</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Node</span><span class="p">;</span>
</code></pre></div></div>

<p>and I used two sentinel nodes to define the beginning and end of the list:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span> <span class="n">priority_queue_t</span>
<span class="p">{</span>
	<span class="n">Node</span> <span class="o">*</span><span class="n">head</span><span class="p">;</span>
	<span class="n">Node</span> <span class="o">*</span><span class="n">tail</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">size</span><span class="p">;</span>
<span class="p">}</span> <span class="n">PQueue</span><span class="p">;</span>
</code></pre></div></div>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* list modifier */</span>
<span class="kt">void</span> <span class="nf">Push</span><span class="p">(</span><span class="n">PQueue</span> <span class="o">*</span><span class="n">pq</span><span class="p">,</span> <span class="k">const</span> <span class="n">Element</span> <span class="n">data</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">priority</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">Node</span> <span class="o">*</span><span class="n">curr</span> <span class="o">=</span> <span class="n">pq</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
	<span class="n">Node</span> <span class="o">*</span><span class="n">end</span> <span class="o">=</span> <span class="n">pq</span><span class="o">-&gt;</span><span class="n">tail</span><span class="p">;</span>

	<span class="k">for</span><span class="p">(;</span> <span class="n">curr</span> <span class="o">!=</span> <span class="n">end</span><span class="p">;</span> <span class="n">curr</span> <span class="o">=</span> <span class="n">curr</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="c1">// highest priority comes first</span>
		<span class="k">if</span><span class="p">(</span><span class="n">curr</span><span class="o">-&gt;</span><span class="n">priority</span> <span class="o">&lt;</span> <span class="n">priority</span><span class="p">)</span>
		<span class="p">{</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="n">Node</span> <span class="o">*</span><span class="n">work</span> <span class="o">=</span> <span class="n">NewNode</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">priority</span><span class="p">);</span>
	<span class="n">ConnectNode</span><span class="p">(</span><span class="n">work</span><span class="p">,</span> <span class="n">curr</span><span class="p">);</span>
	<span class="n">pq</span><span class="o">-&gt;</span><span class="n">size</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">Pop</span><span class="p">(</span><span class="n">PQueue</span> <span class="o">*</span><span class="n">pq</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">pq</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"deleting the last node..</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
		<span class="n">Delete</span><span class="p">(</span><span class="n">pq</span><span class="p">,</span> <span class="n">pq</span><span class="o">-&gt;</span><span class="n">tail</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="cm">/* list access */</span>
<span class="n">Element</span> <span class="nf">GetHighestPriority</span><span class="p">(</span><span class="k">const</span> <span class="n">PQueue</span> <span class="o">*</span><span class="n">pq</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">pq</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"list is empty...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">pq</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">Element</span> <span class="nf">GetSmallestPriority</span><span class="p">(</span><span class="k">const</span> <span class="n">PQueue</span> <span class="o">*</span><span class="n">pq</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="n">pq</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"list is empty...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">pq</span><span class="o">-&gt;</span><span class="n">tail</span><span class="o">-&gt;</span><span class="n">prev</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>
<h2 id="applications-">Applications <a id="app"></a></h2>
<ul>
  <li>CPU Scheduling</li>
  <li>OS Task Scheduling</li>
  <li>Shortest Path Algorithm</li>
  <li>Control Netrwork Traffic</li>
</ul>

<p><br /></p>
<h2 id="reference-">Reference <a id="ref"></a></h2>
<ul>
  <li><a href="https://en.cppreference.com/w/cpp/container/priority_queue">cppreference : priority queue</a></li>
</ul>
:ET