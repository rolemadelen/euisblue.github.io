I"_1<h2 id="contents">Contents</h2>
<ul>
  <li><a href="#concept">Concept</a></li>
  <li><a href="#op">Operations</a></li>
  <li><a href="#implement">Implementations</a>
    <ul>
      <li><a href="#linkedlist">Linked List</a></li>
      <li><a href="#array">Array</a></li>
    </ul>
  </li>
  <li><a href="#app">Applications</a></li>
  <li><a href="#try">Problems to Try</a></li>
  <li><a href="#ref">Reference</a></li>
</ul>
<hr />

<p><br /></p>

<h2 id="concept-">Concept <a id="concept"></a></h2>
<p>A linear data structure that follows <strong>LIFO</strong> (Last-In First-Out) or <strong>FILO</strong> (First-In Last-Out) design which an element that came in first is evaluated last. An element can only be inserted/deleted at the one end of the container.</p>

<h2 id="operations-">Operations <a id="op"></a></h2>
<p>Due to the <strong>LIFO</strong> characteristic of Stack, the top element refers to the most recently added item in the container.</p>

<ul>
  <li><strong>void push(..)</strong>: inserts element at the top</li>
  <li><strong>void pop(..)</strong>: removes the top element</li>
  <li><strong>bool isEmpty(..)</strong>: checks whether the container is empty</li>
  <li><strong>T top(..)</strong>: returns the top element</li>
  <li><strong>int size(..)</strong>: returns the number of elements.</li>
</ul>

<h2 id="implementation-">Implementation <a id="implement"></a></h2>
<p>Stack can be implemented using a linked list or an array and each system has both pros and cons.</p>

<p>If Stack is implemented with a <strong>linked list</strong>,</p>
<ul>
  <li>we can insert/delete elements in O(1) time.</li>
  <li>But access requires O(n) time.</li>
</ul>

<p>If Stack is implemented with an <strong>array</strong>,</p>
<ul>
  <li>we can insert elements in O(1) time, but</li>
  <li>deleting now takes O(n) due to shifting of elements.</li>
  <li>But access can be done in O(1) time.</li>
</ul>

<p>If number of operations on insert/delete is dominating the number of operations on access, it is better to choose Linked List rather than Array and vice versa.</p>

<h3 id="linked-list-based-stack-">Linked List based Stack <a id="linkedlist"></a></h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">push</span><span class="p">(</span><span class="n">Stack</span> <span class="o">*</span><span class="n">stk</span><span class="p">,</span> <span class="n">elem</span> <span class="n">_data</span><span class="p">)</span>
<span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">stk</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="p">{</span>
                <span class="n">stk</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">stk</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">)));</span>
                <span class="n">stk</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">_data</span><span class="p">;</span>
                <span class="n">stk</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
                <span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">temp</span><span class="p">));</span>
                <span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">_data</span><span class="p">;</span>
                <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">stk</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
                <span class="n">stk</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="o">++</span><span class="p">(</span><span class="n">stk</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">pop</span><span class="p">(</span><span class="n">Stack</span> <span class="o">*</span><span class="n">stk</span><span class="p">)</span>
<span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">isEmpty</span><span class="p">(</span><span class="n">stk</span><span class="p">))</span>
        <span class="p">{</span>
                <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">stk</span><span class="o">-&gt;</span><span class="n">head</span><span class="p">;</span>
        <span class="n">stk</span><span class="o">-&gt;</span><span class="n">head</span> <span class="o">=</span> <span class="n">stk</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
        <span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
        <span class="n">free</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>

        <span class="o">--</span><span class="p">(</span><span class="n">stk</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">bool</span> <span class="nf">isEmpty</span><span class="p">(</span><span class="k">const</span> <span class="n">Stack</span> <span class="o">*</span><span class="n">stk</span><span class="p">)</span>
<span class="p">{</span>
        <span class="k">return</span> <span class="n">stk</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">elem</span> <span class="nf">top</span><span class="p">(</span><span class="k">const</span> <span class="n">Stack</span> <span class="o">*</span><span class="n">stk</span><span class="p">)</span>
<span class="p">{</span>
        <span class="n">assert</span><span class="p">(</span><span class="n">stk</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>

        <span class="k">return</span> <span class="n">stk</span><span class="o">-&gt;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">size</span><span class="p">(</span><span class="k">const</span> <span class="n">Stack</span> <span class="o">*</span><span class="n">stk</span><span class="p">)</span>
<span class="p">{</span>
        <span class="k">return</span> <span class="n">stk</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="array-based-stack-">Array based Stack <a id="array"></a></h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">push</span><span class="p">(</span><span class="n">Stack</span> <span class="o">*</span><span class="n">stk</span><span class="p">,</span> <span class="n">elem</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">stk</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">==</span> <span class="n">stk</span><span class="o">-&gt;</span><span class="n">capacity</span><span class="p">)</span>
        <span class="p">{</span>
                <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Stack is full</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
                <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">stk</span><span class="o">-&gt;</span><span class="n">stack</span><span class="p">[</span><span class="n">stk</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
        <span class="o">++</span><span class="p">(</span><span class="n">stk</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">pop</span><span class="p">(</span><span class="n">Stack</span> <span class="o">*</span><span class="n">stk</span><span class="p">)</span>
<span class="p">{</span>
        <span class="o">--</span><span class="p">(</span><span class="n">stk</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">bool</span> <span class="nf">isEmpty</span><span class="p">(</span><span class="k">const</span> <span class="n">Stack</span> <span class="o">*</span><span class="n">stk</span><span class="p">)</span>
<span class="p">{</span>
        <span class="k">return</span> <span class="n">stk</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">elem</span> <span class="nf">top</span><span class="p">(</span><span class="k">const</span> <span class="n">Stack</span> <span class="o">*</span><span class="n">stk</span><span class="p">)</span>
<span class="p">{</span>
        <span class="n">assert</span><span class="p">(</span><span class="n">stk</span><span class="o">-&gt;</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>

        <span class="k">return</span> <span class="n">stk</span><span class="o">-&gt;</span><span class="n">stack</span><span class="p">[</span><span class="n">stk</span><span class="o">-&gt;</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">size</span><span class="p">(</span><span class="k">const</span> <span class="n">Stack</span> <span class="o">*</span><span class="n">stk</span><span class="p">)</span>
<span class="p">{</span>
        <span class="k">return</span> <span class="n">stk</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="applications-of-stack-">Applications of Stack <a id="app"></a></h2>
<ul>
  <li>Tree Traversal Algorithm</li>
  <li>Backtracking Algorithm
    <ul>
      <li>Rat in a maze</li>
      <li>Sudoko solver</li>
    </ul>
  </li>
  <li>Graph Algorithm
    <ul>
      <li>Topological sorting</li>
    </ul>
  </li>
  <li>Expression Related
    <ul>
      <li>Valid Parenthesis String (VPS) checker</li>
      <li>Infix/Prefix/Postfix notation converter</li>
    </ul>
  </li>
  <li>Editor
    <ul>
      <li>Redo and undo features</li>
    </ul>
  </li>
  <li>Web Browser
    <ul>
      <li>Go forward and backward  features</li>
    </ul>
  </li>
</ul>

<h2 id="problems-to-try-">Problems to Try <a id="try"></a></h2>
<ul>
  <li><a href="https://leetcode.com/problems/valid-parentheses/">Valid Parentheses</a></li>
</ul>

<h2 id="references-">References <a id="ref"></a></h2>
<ul>
  <li><a href="https://en.cppreference.com/w/cpp/container/stack">cppreference : stack</a></li>
  <li><a href="https://leetcode.com/">leetcode.com</a></li>
</ul>
:ET