I"…6<p>Subscribe <a href="https://www.dailycodingproblem.com">Daily Coding Problem</a> to receive a coding problem every day.</p>

<h2 id="dcp-3-"><strong>DCP #3</strong> <a id="dcp3"></a></h2>
<p>This problem was asked by Google.</p>

<p>Given the root to a binary tree, implement serialize(root), which serializes the tree into a string, and deserialize(s), which deserializes the string back into the tree.</p>

<p>For example, given the following Node class</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">left</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">right</span>
</code></pre></div></div>
<p>The following test should pass:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">node</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="s">'root'</span><span class="p">,</span> <span class="n">Node</span><span class="p">(</span><span class="s">'left'</span><span class="p">,</span> <span class="n">Node</span><span class="p">(</span><span class="s">'left.left'</span><span class="p">)),</span> <span class="n">Node</span><span class="p">(</span><span class="s">'right'</span><span class="p">))</span>
<span class="k">assert</span> <span class="n">deserialize</span><span class="p">(</span><span class="n">serialize</span><span class="p">(</span><span class="n">node</span><span class="p">))</span><span class="o">.</span><span class="n">left</span><span class="o">.</span><span class="n">left</span><span class="o">.</span><span class="n">val</span> <span class="o">==</span> <span class="s">'left.left'</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="my-solution"><strong>My Solution</strong></h2>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span>
    <span class="nb">attr_accessor</span> <span class="ss">:val</span><span class="p">,</span> <span class="ss">:left</span><span class="p">,</span> <span class="ss">:right</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
        <span class="vi">@val</span> <span class="o">=</span> <span class="n">val</span>
        <span class="vi">@left</span> <span class="o">=</span> <span class="n">left</span>
        <span class="vi">@right</span> <span class="o">=</span> <span class="n">right</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">node</span> <span class="o">==</span> <span class="kp">nil</span> 
        <span class="k">return</span> <span class="s1">'nil'</span>
    <span class="k">end</span>

    <span class="n">left_str</span> <span class="o">=</span> <span class="n">serialize</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="nf">left</span><span class="p">)</span>
    <span class="n">right_str</span> <span class="o">=</span> <span class="n">serialize</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="nf">right</span><span class="p">)</span>

    <span class="k">return</span> <span class="s2">"</span><span class="si">#{</span><span class="n">node</span><span class="p">.</span><span class="nf">val</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">left_str</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">right_str</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">deserialize</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="n">tokens</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s1">' '</span><span class="p">)</span>

    <span class="n">des_helper</span> <span class="n">tokens</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">des_helper</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span>
    <span class="n">current</span> <span class="o">=</span> <span class="n">tokens</span><span class="p">.</span><span class="nf">shift</span>

    <span class="k">if</span> <span class="n">current</span> <span class="o">==</span> <span class="s1">'nil'</span>
        <span class="k">return</span> <span class="kp">nil</span>
    <span class="k">end</span>

    <span class="n">curr_node</span> <span class="o">=</span> <span class="no">Node</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">current</span><span class="p">)</span>
    <span class="n">curr_node</span><span class="p">.</span><span class="nf">left</span> <span class="o">=</span> <span class="n">des_helper</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span>
    <span class="n">curr_node</span><span class="p">.</span><span class="nf">right</span> <span class="o">=</span> <span class="n">des_helper</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">curr_node</span>
<span class="k">end</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="explanation"><strong>Explanation</strong></h2>

<p>I first attempted going for a <code class="highlighter-rouge">DFS</code> and I failed miserably (now that I think of it, it actually worked but just didnâ€™t realize my results were correct) so I changed my route to <code class="highlighter-rouge">preorder</code> traversal.</p>

<p>Preorder is one of three traversals to go through each nodes in a tree and it works like this:</p>
<ol>
  <li>visit</li>
  <li>travel left</li>
  <li>travel right</li>
</ol>

<p>I used the above method to accomplish <code class="highlighter-rouge">serialize(node)</code> method.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="c1"># terminating condition</span>
    <span class="k">if</span> <span class="n">node</span> <span class="o">==</span> <span class="kp">nil</span> 
        <span class="k">return</span> <span class="s1">'nil'</span>
    <span class="k">end</span>

    <span class="c1"># get the value of current node's left child</span>
    <span class="n">left_str</span> <span class="o">=</span> <span class="n">serialize</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="nf">left</span><span class="p">)</span>
    <span class="c1"># get the value current node's right child</span>
    <span class="n">right_str</span> <span class="o">=</span> <span class="n">serialize</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="nf">right</span><span class="p">)</span>

    <span class="c1"># concatenate current node's two childs value after the current</span>
    <span class="c1"># separate each nodes with a space</span>
    <span class="k">return</span> <span class="s2">"</span><span class="si">#{</span><span class="n">node</span><span class="p">.</span><span class="nf">val</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">left_str</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">right_str</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</code></pre></div></div>

<p><br /></p>

<p>Now that we serialized a binary tree, we need to deserialize them.</p>

<p>In order to do that, our <code class="highlighter-rouge">deserialize(s)</code> must go follow the same path the serilaization went through to recreate the tree.</p>

<p>Since <code class="highlighter-rouge">preorder</code> was the method used in serialization, we use same method for deserialization.</p>

<p>But first, we separate each nodes in a string.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">deserialize</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="c1"># separate nodes from a string and call the helper function</span>
    <span class="n">tokens</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s1">' '</span><span class="p">)</span>
    <span class="n">des_helper</span> <span class="n">tokens</span>
<span class="k">end</span>
</code></pre></div></div>
<p><br /></p>

<p>We then insert each node into a tree <strong>starting from the front node one by one</strong>.
This sounds like a <code class="highlighter-rouge">Queue</code> doesnâ€™t it?</p>

<p>So I used <code class="highlighter-rouge">.first</code> and <code class="highlighter-rouge">.shift</code> methods in an Array to use the array <code class="highlighter-rouge">tokens</code> like a queue.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">des_helper</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span>
    <span class="c1"># pop the queue</span>
    <span class="n">current</span> <span class="o">=</span> <span class="n">tokens</span><span class="p">.</span><span class="nf">shift</span>

    <span class="k">if</span> <span class="n">current</span> <span class="o">==</span> <span class="s1">'nil'</span>
        <span class="k">return</span> <span class="kp">nil</span>
    <span class="k">end</span>

    <span class="c1"># create a root node</span>
    <span class="n">curr_node</span> <span class="o">=</span> <span class="no">Node</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">current</span><span class="p">)</span>
    <span class="c1"># recursively read and store current node's left and right nodes</span>
    <span class="n">curr_node</span><span class="p">.</span><span class="nf">left</span> <span class="o">=</span> <span class="n">des_helper</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span>
    <span class="n">curr_node</span><span class="p">.</span><span class="nf">right</span> <span class="o">=</span> <span class="n">des_helper</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span>

    <span class="c1"># return the root of the recreated tree</span>
    <span class="k">return</span> <span class="n">curr_node</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Time Complexity is <strong>O(n)</strong> since we need to visit every nodes in a binary tree including the <code class="highlighter-rouge">nil</code>. <br />
Space complexity is also <strong>O(n)</strong> because of the stack frame added during the recursion procedure.</p>

<p><br /></p>

<h2 id="related-posts-"><strong>Related Posts</strong> <a id="related"></a></h2>

<div class="relatedPosts">





  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      â”ˆ <a href="/dcp/2019/10/27/en-dcp-7.html">DCP 7: Message Decoding</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      â”ˆ <a href="/dcp/2019/10/25/en-dcp-6.html">DCP 6: XOR Linked List</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      â”ˆ <a href="/dcp/2019/10/20/en-dcp-5.html">DCP 5: CAR and CDR</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      â”ˆ <a href="/dcp/2019/09/21/en-dcp-4.html">DCP 4: Lowest Positive Number</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      â”ˆ <a href="/dcp/2019/09/19/en-dcp-2.html">DCP 2: New Array</a>
      </div>
      
      
        

</div>

:ET