I"&!<p><a href="https://www.dailycodingproblem.com">Daily Coding Problem</a>ブログ購読をすると、毎日一つのプログラミング問題をメールにて送信します。</p>

<h2 id="dcp-2"><strong>DCP #2</strong></h2>
<p>この問題は実際Uberの面接からの質問です。</p>

<p>与えられた整数の配列「<code class="highlighter-rouge">arr</code>」を使って、新しい配列「<code class="highlighter-rouge">narr</code>」を作ろうと思います。
<code class="highlighter-rouge">narr</code>の<code class="highlighter-rouge">i</code>番目の要素は、<code class="highlighter-rouge">arr</code>の<code class="highlighter-rouge">i</code>番目を除いたすべての要素を掛けた値が保存されてあります。</p>

<p>例えば<code class="highlighter-rouge">arr = [1, 2, 3, 4, 5]</code>を与えられたとき, <code class="highlighter-rouge">narr[0]</code>の要素には<code class="highlighter-rouge">arr[0]</code>を除いたすべての要素たちを掛けた値、<code class="highlighter-rouge">2*3*4*5 = 120</code>が入ります。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>入力： [1, 2, 3, 4, 5]
出力： [120, 60, 40, 30, 24]
</code></pre></div></div>

<p><br />
<strong>ボーナス：</strong> 割り算ができない場合は？</p>

<p><a href="en-dcp-2.html#dcp2">原文を読む</a></p>

<p><br /></p>

<h2 id="コード--説明"><strong>コード &amp; 説明</strong></h2>

<p><a href="https://github.com/muicode/DCP/blob/master/problem2/dcp2.c">Cコード</a></p>

<h3 id="割り算o"><strong>割り算「O」</strong></h3>
<p>割り算があったら簡単。</p>

<p>すべての要素を掛けた値を配列を繰り返しながら該当要素の値で割れば終わり。<br />
In-placeでできるから追加なメモリはいらない。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">with_div</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
    <span class="n">product</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="nf">inject</span><span class="p">(:</span><span class="o">*</span><span class="p">)</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="nf">length</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="p">(</span><span class="mi">0</span> <span class="o">...</span> <span class="n">n</span><span class="p">)</span>
        <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">product</span><span class="o">/</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">end</span>
    <span class="n">arr</span>
<span class="k">end</span>
</code></pre></div></div>

<p>時間複雑度は<strong>O(n)</strong>、空間複雑度は<strong>O(1)</strong>だ。</p>

<p><br /></p>

<h3 id="割り算x"><strong>割り算「X」</strong></h3>
<p>割り算ができない？</p>

<p>筆者の馬鹿な頭で考えれる唯一な方法は二重ループを使用するのだ。配列を繰り返しながら該当要素と
違う要素たちと掛けて最後に新しい配列に保存する。</p>

<p>既存配列の値たちを使用されるため新しい配列はいるべきだ。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">without_div</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="nf">length</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="p">(</span><span class="mi">0</span> <span class="o">...</span> <span class="n">n</span><span class="p">)</span>
        <span class="n">prod</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="p">(</span><span class="mi">0</span> <span class="o">...</span> <span class="n">n</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="n">i</span>
                <span class="n">prod</span> <span class="o">*=</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
            <span class="k">end</span>
        <span class="k">end</span>
        <span class="n">ans</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">prod</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="n">ans</span>
<span class="k">end</span>
</code></pre></div></div>

<p>時間複雑度は<strong>O(n^2)</strong>、空間複雑度は<strong>O(n)</strong>だ。</p>

<p>これはRubyスタールで作成したコードだけど、パフォーマンス的には上のコードと別段違わない。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">wo_division2</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="p">.</span><span class="nf">length</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="p">[]</span> <span class="o">*</span> <span class="n">n</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="p">(</span><span class="mi">0</span> <span class="o">...</span> <span class="n">n</span><span class="p">)</span>
        <span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">arr</span> <span class="o">-</span> <span class="p">[</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]]).</span><span class="nf">inject</span><span class="p">(:</span><span class="o">*</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="n">ans</span>
<span class="k">end</span>
</code></pre></div></div>

<p>割り算ができない場合はO(n^2)以下で解く方法を筆者は思い出せなくて、ちょって調べてみた。<br />
この<a href="https://dev.to/cwetanow/daily-coding-problem-2-21pj">ブログの記事</a>のコメントを見たらO(n)で解いた
コードを確認できる。</p>

<p><br /></p>

<h2 id="関連記事-"><strong>関連記事</strong> <a id="related"></a></h2>

<div class="relatedPosts">





  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      ┈ <a href="/dcp/2019/10/27/ja-dcp-7.html">DCP 7・メッセージ解読</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      ┈ <a href="/dcp/2019/10/25/ja-dcp-6.html">DCP 6・XOR連結リスト</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      ┈ <a href="/dcp/2019/10/20/ja-dcp-5.html">DCP 5・CARとCDR</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      ┈ <a href="/dcp/2019/09/21/ja-dcp-4.html">DCP 4・一番低い正数</a>
      </div>
      
      
    

  

    
    

    

    

  

    
    

    

    

  

    
    

    

    
      <div>
      ┈ <a href="/dcp/2019/09/20/ja-dcp-3.html">DCP 3・直列化 ＆ 逆直列化</a>
      </div>
      
      
        

</div>

:ET